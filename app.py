import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score
from sklearn.impute import SimpleImputer
import joblib

# Load data
data = pd.read_csv('gold_prices.csv', index_col='Date', parse_dates=True)

# Fill missing values (if any)
data.fillna(method='ffill', inplace=True)

# Create features
data['Prev_Close'] = data['Close'].shift(1)
data['MA7'] = data['Close'].rolling(window=7).mean()

# Drop NaN values generated by shifting
data.dropna(inplace=True)

# Target variable
data['Target'] = np.where(data['Close'].shift(-1) > data['Close'], 1, 0)

# Define features and target
X = data[['Prev_Close', 'MA7']]
y = data['Target']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Impute missing values
imputer = SimpleImputer(strategy='mean')
X_train = imputer.fit_transform(X_train)
X_test = imputer.transform(X_test)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
print(f'Accuracy: {accuracy_score(y_test, y_pred):.2f}')
print(classification_report(y_test, y_pred))

# Save the model and scaler
joblib.dump(model, 'gold_trading_model.pkl')
joblib.dump(scaler, 'scaler.pkl')
